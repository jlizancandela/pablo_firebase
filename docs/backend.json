{
  "entities": {
    "Project": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Project",
      "type": "object",
      "description": "Represents a construction project.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the project."
        },
        "name": {
          "type": "string",
          "description": "Name of the project."
        },
        "address": {
          "type": "string",
          "description": "Address of the project."
        },
        "client": {
          "type": "string",
          "description": "Name of the client for the project."
        },
        "startDate": {
          "type": "string",
          "description": "Start date of the project.",
          "format": "date-time"
        },
        "projectType": {
          "type": "string",
          "description": "Type of the project (e.g., residential, commercial)."
        },
        "coverPhotoUrl": {
          "type": "string",
          "description": "URL of the cover photo for the project.",
          "format": "uri"
        }
      },
      "required": [
        "id",
        "name",
        "address",
        "client",
        "startDate",
        "projectType"
      ]
    },
    "Task": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Task",
      "type": "object",
      "description": "Represents a task within a construction project.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the task."
        },
        "projectId": {
          "type": "string",
          "description": "Reference to Project. (Relationship: Project 1:N Task)"
        },
        "description": {
          "type": "string",
          "description": "Description of the task."
        },
        "assignee": {
          "type": "string",
          "description": "Name of the person assigned to the task."
        },
        "priority": {
          "type": "string",
          "description": "Priority of the task (e.g., high, medium, low)."
        },
        "completionStatus": {
          "type": "boolean",
          "description": "Status indicating whether the task is complete."
        }
      },
      "required": [
        "id",
        "projectId",
        "description",
        "assignee",
        "priority",
        "completionStatus"
      ]
    },
    "Photo": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Photo",
      "type": "object",
      "description": "Represents a photo associated with a construction project.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the photo."
        },
        "projectId": {
          "type": "string",
          "description": "Reference to Project. (Relationship: Project 1:N Photo)"
        },
        "imageUrl": {
          "type": "string",
          "description": "URL of the photo.",
          "format": "uri"
        },
        "comment": {
          "type": "string",
          "description": "Comment associated with the photo."
        }
      },
      "required": [
        "id",
        "projectId",
        "imageUrl"
      ]
    },
    "Visit": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Visit",
      "type": "object",
      "description": "Represents a site visit for a construction project.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the visit."
        },
        "projectId": {
          "type": "string",
          "description": "Reference to Project. (Relationship: Project 1:N Visit)"
        },
        "date": {
          "type": "string",
          "description": "Date of the site visit.",
          "format": "date-time"
        },
        "currentPhase": {
          "type": "string",
          "description": "Current phase of the project during the visit."
        },
        "attendees": {
          "type": "string",
          "description": "List of attendees for the site visit."
        },
        "observations": {
          "type": "string",
          "description": "Detailed observations from the site visit."
        }
      },
      "required": [
        "id",
        "projectId",
        "date",
        "currentPhase",
        "attendees",
        "observations"
      ]
    }
  },
  "auth": {
    "providers": [
      "password",
      "anonymous"
    ]
  },
  "firestore": {
    "structure": [
      {
        "path": "/users/{userId}/projects/{projectId}",
        "definition": {
          "entityName": "Project",
          "schema": {
            "$ref": "#/backend/entities/Project"
          },
          "description": "Stores construction projects owned by a specific user. Enforces path-based ownership. The 'userId' path segment determines access control based on authentication.",
          "params": [
            {
              "name": "userId",
              "description": "The unique identifier of the user who owns the project."
            },
            {
              "name": "projectId",
              "description": "The unique identifier of the project."
            }
          ]
        }
      },
      {
        "path": "/users/{userId}/projects/{projectId}/tasks/{taskId}",
        "definition": {
          "entityName": "Task",
          "schema": {
            "$ref": "#/backend/entities/Task"
          },
          "description": "Stores tasks associated with a specific project. Inherits ownership from the parent project via path. The 'userId' path segment determines access control based on authentication.",
          "params": [
            {
              "name": "userId",
              "description": "The unique identifier of the user who owns the project and task."
            },
            {
              "name": "projectId",
              "description": "The unique identifier of the project to which the task belongs."
            },
            {
              "name": "taskId",
              "description": "The unique identifier of the task."
            }
          ]
        }
      },
      {
        "path": "/users/{userId}/projects/{projectId}/photos/{photoId}",
        "definition": {
          "entityName": "Photo",
          "schema": {
            "$ref": "#/backend/entities/Photo"
          },
          "description": "Stores photos associated with a specific project. Inherits ownership from the parent project via path. The 'userId' path segment determines access control based on authentication.",
          "params": [
            {
              "name": "userId",
              "description": "The unique identifier of the user who owns the project and photo."
            },
            {
              "name": "projectId",
              "description": "The unique identifier of the project to which the photo belongs."
            },
            {
              "name": "photoId",
              "description": "The unique identifier of the photo."
            }
          ]
        }
      },
      {
        "path": "/users/{userId}/projects/{projectId}/visits/{visitId}",
        "definition": {
          "entityName": "Visit",
          "schema": {
            "$ref": "#/backend/entities/Visit"
          },
          "description": "Stores site visits associated with a specific project. Inherits ownership from the parent project via path. The 'userId' path segment determines access control based on authentication.",
          "params": [
            {
              "name": "userId",
              "description": "The unique identifier of the user who owns the project and visit."
            },
            {
              "name": "projectId",
              "description": "The unique identifier of the project to which the visit belongs."
            },
            {
              "name": "visitId",
              "description": "The unique identifier of the visit."
            }
          ]
        }
      }
    ],
    "reasoning": "The Firestore structure is designed to manage construction project data, including projects, tasks, photos, and visits, enabling offline functionality via WatermelonDB and optional Firebase synchronization. To ensure authorization independence (critical for offline operation and scalability), the structure focuses on direct path-based ownership and avoids hierarchical `get()` calls in security rules. This is achieved by using nested collections under the `users/{userId}` path for private data, enabling secure list operations (QAPs) and atomic operations (transactions/batches).\n\nSpecifically:\n\n1.  **Projects:** Projects are stored under `/users/{userId}/projects/{projectId}`. This structure ensures that only the user who owns the data can manage their projects.\n2.  **Tasks, Photos, Visits:** These are modeled as subcollections under each project (`/users/{userId}/projects/{projectId}/tasks/{taskId}`, `/users/{userId}/projects/{projectId}/photos/{photoId}`, `/users/{userId}/projects/{projectId}/visits/{visitId}`). This enforces path-based ownership and simplifies security rules since the owner of the project inherently owns all associated tasks, photos, and visits.\n\nThis structure ensures Authorization Independence by avoiding dependency on parent document data for child access. Security rules will primarily focus on verifying `request.auth.uid` against the `userId` path segment, ensuring that only the authenticated user can access data under their respective path.\n\nFurthermore, this structure supports the required QAPs because each collection has a well-defined, consistent security posture. List operations are secure because the rules can simply verify that the user is authenticated and the `userId` in the path matches the `request.auth.uid`. Segregation by path allows for simple, secure `list` operations based on ownership."
  }
}