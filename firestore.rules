/**
 * @file Overview
 * Core Philosophy: This ruleset enforces a strict user-ownership model for construction project data.
 * All data is nested under /users/{userId}, ensuring that only the authenticated user can access their own data.
 *
 * Data Structure:
 * - /users/{userId}/projects/{projectId}: Stores project data, owned by the user identified by {userId}.
 * - /users/{userId}/projects/{projectId}/tasks/{taskId}: Stores tasks related to a project, inheriting ownership from the project.
 * - /users/{userId}/projects/{projectId}/photos/{photoId}: Stores photos related to a project, inheriting ownership from the project.
 * - /users/{userId}/projects/{projectId}/visits/{visitId}: Stores visit data related to a project, inheriting ownership from the project.
 *
 * Key Security Decisions:
 * - User listing is implicitly disallowed by the rules structure.
 * - Data consistency is enforced between the path and internal document fields on create and update.
 * - Helper functions are used to abstract complex logic and improve readability.
 * - Focus on path-based ownership to avoid complex `get()` calls and maintain authorization independence.
 *
 * Authorization Independence: The data structure is designed such that access control can be determined solely from the document path and the user's authentication status,
 * without needing to read other documents (avoiding `get()` calls). This approach is critical for offline operation and scalability.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Secures project documents under a user's path.
     * @path /users/{userId}/projects/{projectId}
     * @allow (create) - User 'user123' can create a new project with projectId 'project456' under their user ID if authenticated.
     * @allow (get, list, update, delete) - User 'user123' can read, update, and delete project 'project456' under their user ID if authenticated.
     * @deny (create) - User 'user456' cannot create a project under the 'user123' path, even if authenticated.
     * @deny (update) - User 'user456' cannot update a project under the 'user123' path, even if authenticated.
     * @principle Enforces document ownership for writes and restricts access to a user's own data tree.
     */
    match /users/{userId}/projects/{projectId} {
      // Allow read access to the project if the user is the owner
      allow get: if isSignedIn() && isOwner(userId);
      // Allow listing projects if the user is the owner
      allow list: if isSignedIn() && isOwner(userId);
      // Allow creating a project if the user is the owner
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.id == projectId;
      // Allow updating a project if the user is the owner and the document exists
      allow update: if isSignedIn() && isExistingOwner(userId) && resource.data.id == request.resource.data.id;
      // Allow deleting a project if the user is the owner and the document exists
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    /**
     * @description Secures task documents under a project's path, inheriting ownership.
     * @path /users/{userId}/projects/{projectId}/tasks/{taskId}
     * @allow (create) - User 'user123' can create a new task with taskId 'task789' under project 'project456' if authenticated.
     * @allow (get, list, update, delete) - User 'user123' can read, update, and delete task 'task789' under project 'project456' if authenticated.
     * @deny (create) - User 'user456' cannot create a task under project 'project456' in user 'user123''s path, even if authenticated.
     * @deny (update) - User 'user456' cannot update a task under project 'project456' in user 'user123''s path, even if authenticated.
     * @principle Enforces document ownership for writes and restricts access to a user's own data tree.
     */
    match /users/{userId}/projects/{projectId}/tasks/{taskId} {
      // Allow read access to the task if the user is the owner
      allow get: if isSignedIn() && isOwner(userId);
      // Allow listing tasks if the user is the owner
      allow list: if isSignedIn() && isOwner(userId);
      // Allow creating a task if the user is the owner
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.id == taskId && request.resource.data.projectId == projectId;
      // Allow updating a task if the user is the owner and the document exists
      allow update: if isSignedIn() && isExistingOwner(userId) && resource.data.id == request.resource.data.id && resource.data.projectId == request.resource.data.projectId;
      // Allow deleting a task if the user is the owner and the document exists
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    /**
     * @description Secures photo documents under a project's path, inheriting ownership.
     * @path /users/{userId}/projects/{projectId}/photos/{photoId}
     * @allow (create) - User 'user123' can create a new photo with photoId 'photo101' under project 'project456' if authenticated.
     * @allow (get, list, update, delete) - User 'user123' can read, update, and delete photo 'photo101' under project 'project456' if authenticated.
     * @deny (create) - User 'user456' cannot create a photo under project 'project456' in user 'user123''s path, even if authenticated.
     * @deny (update) - User 'user456' cannot update a photo under project 'project456' in user 'user123''s path, even if authenticated.
     * @principle Enforces document ownership for writes and restricts access to a user's own data tree.
     */
    match /users/{userId}/projects/{projectId}/photos/{photoId} {
      // Allow read access to the photo if the user is the owner
      allow get: if isSignedIn() && isOwner(userId);
      // Allow listing photos if the user is the owner
      allow list: if isSignedIn() && isOwner(userId);
      // Allow creating a photo if the user is the owner
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.id == photoId && request.resource.data.projectId == projectId;
      // Allow updating a photo if the user is the owner and the document exists
      allow update: if isSignedIn() && isExistingOwner(userId) && resource.data.id == request.resource.data.id && resource.data.projectId == request.resource.data.projectId;
      // Allow deleting a photo if the user is the owner and the document exists
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    /**
     * @description Secures visit documents under a project's path, inheriting ownership.
     * @path /users/{userId}/projects/{projectId}/visits/{visitId}
     * @allow (create) - User 'user123' can create a new visit with visitId 'visit121' under project 'project456' if authenticated.
     * @allow (get, list, update, delete) - User 'user123' can read, update, and delete visit 'visit121' under project 'project456' if authenticated.
     * @deny (create) - User 'user456' cannot create a visit under project 'project456' in user 'user123''s path, even if authenticated.
     * @deny (update) - User 'user456' cannot update a visit under project 'project456' in user 'user123''s path, even if authenticated.
     * @principle Enforces document ownership for writes and restricts access to a user's own data tree.
     */
    match /users/{userId}/projects/{projectId}/visits/{visitId} {
      // Allow read access to the visit if the user is the owner
      allow get: if isSignedIn() && isOwner(userId);
      // Allow listing visits if the user is the owner
      allow list: if isSignedIn() && isOwner(userId);
      // Allow creating a visit if the user is the owner
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.id == visitId && request.resource.data.projectId == projectId;
      // Allow updating a visit if the user is the owner and the document exists
      allow update: if isSignedIn() && isExistingOwner(userId) && resource.data.id == request.resource.data.id && resource.data.projectId == request.resource.data.projectId;
      // Allow deleting a visit if the user is the owner and the document exists
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }
  }

  // Helper functions
  function isSignedIn() {
    return request.auth != null;
  }

  function isOwner(userId) {
    return request.auth.uid == userId;
  }

  function isExistingOwner(userId) {
    return isSignedIn() && isOwner(userId) && resource != null;
  }
}