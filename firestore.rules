/**
 * @fileoverview Firestore Security Rules for Construction Project Management App
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model for all data. Each user has full control over their own data, and no access to other users' data.
 *
 * Data Structure:
 * All data is nested under /users/{userId}, ensuring clear ownership. Projects, tasks, photos, and visits are all subcollections of the user's document.
 *
 * Key Security Decisions:
 * - Users can only access data under their own /users/{userId} path.
 * - Listing other users' projects is explicitly disallowed.
 * - Data validation is limited to ensuring ownership and relational integrity. Data types and optional/required fields are not validated to allow rapid prototyping.
 *
 * Denormalization for Authorization:
 * The data structure uses nested collections under /users/{userId} for authorization. This allows rules to check ownership directly via the path without needing to read other documents.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the request is made by a signed-in user.
     * @param {string} userId - The user ID to check against the request's auth UID.
     * @return {bool} True if the user is signed in.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the request is made by the owner of the document, based on the userId in the path.
     * @param {string} userId - The user ID to check against the request's auth UID.
     * @return {bool} True if the user is the owner.
     */
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    /**
     * @description Checks if the request is made by the owner of the document and that the document exists.
     * @param {string} userId - The user ID to check against the request's auth UID.
     * @return {bool} True if the user is the owner and the document exists.
     */
    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }

    /**
     * @description Enforces document ownership for writes.
     * @path /users/{userId}/projects/{projectId}
     * @allow (create) User "Gyk7Rv5bAEgxa1VeW6qlb79F17C2" creates a project under /users/Gyk7Rv5bAEgxa1VeW6qlb79F17C2/projects/someProjectId
     * @deny (create) User "otherUserId" tries to create a project under /users/Gyk7Rv5bAEgxa1VeW6qlb79F17C2/projects/someProjectId
     * @allow (get) User "Gyk7Rv5bAEgxa1VeW6qlb79F17C2" reads project /users/Gyk7Rv5bAEgxa1VeW6qlb79F17C2/projects/someProjectId
     * @deny (get) User "otherUserId" tries to read project /users/Gyk7Rv5bAEgxa1VeW6qlb79F17C2/projects/someProjectId
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId}/projects/{projectId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Enforces document ownership for tasks.
     * @path /users/{userId}/projects/{projectId}/tasks/{taskId}
     * @allow (create) User "Gyk7Rv5bAEgxa1VeW6qlb79F17C2" creates a task under /users/Gyk7Rv5bAEgxa1VeW6qlb79F17C2/projects/someProjectId/tasks/someTaskId
     * @deny (create) User "otherUserId" tries to create a task under /users/Gyk7Rv5bAEgxa1VeW6qlb79F17C2/projects/someProjectId/tasks/someTaskId
     * @allow (get) User "Gyk7Rv5bAEgxa1VeW6qlb79F17C2" reads task /users/Gyk7Rv5bAEgxa1VeW6qlb79F17C2/projects/someProjectId/tasks/someTaskId
     * @deny (get) User "otherUserId" tries to read task /users/Gyk7Rv5bAEgxa1VeW6qlb79F17C2/projects/someProjectId/tasks/someTaskId
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId}/projects/{projectId}/tasks/{taskId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Enforces document ownership for photos.
     * @path /users/{userId}/projects/{projectId}/photos/{photoId}
     * @allow (create) User "Gyk7Rv5bAEgxa1VeW6qlb79F17C2" creates a photo under /users/Gyk7Rv5bAEgxa1VeW6qlb79F17C2/projects/someProjectId/photos/somePhotoId
     * @deny (create) User "otherUserId" tries to create a photo under /users/Gyk7Rv5bAEgxa1VeW6qlb79F17C2/projects/someProjectId/photos/somePhotoId
     * @allow (get) User "Gyk7Rv5bAEgxa1VeW6qlb79F17C2" reads photo /users/Gyk7Rv5bAEgxa1VeW6qlb79F17C2/projects/someProjectId/photos/somePhotoId
     * @deny (get) User "otherUserId" tries to read photo /users/Gyk7Rv5bAEgxa1VeW6qlb79F17C2/projects/someProjectId/photos/somePhotoId
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId}/projects/{projectId}/photos/{photoId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Enforces document ownership for visits.
     * @path /users/{userId}/projects/{projectId}/visits/{visitId}
     * @allow (create) User "Gyk7Rv5bAEgxa1VeW6qlb79F17C2" creates a visit under /users/Gyk7Rv5bAEgxa1VeW6qlb79F17C2/projects/someProjectId/visits/someVisitId
     * @deny (create) User "otherUserId" tries to create a visit under /users/Gyk7Rv5bAEgxa1VeW6qlb79F17C2/projects/someProjectId/visits/someVisitId
     * @allow (get) User "Gyk7Rv5bAEgxa1VeW6qlb79F17C2" reads visit /users/Gyk7Rv5bAEgxa1VeW6qlb79F17C2/projects/someProjectId/visits/someVisitId
     * @deny (get) User "otherUserId" tries to read visit /users/Gyk7Rv5bAEgxa1VeW6qlb79F17C2/projects/someProjectId/visits/someVisitId
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId}/projects/{projectId}/visits/{visitId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }
  }
}